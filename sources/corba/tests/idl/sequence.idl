// Author:    Keith Dennison
// Copyright: Copyright 1998, Functional Objects, Inc.  All rights reserved.

struct Structure {
  string  name;
  octet   info;
};

interface TestObject {
  attribute long id;
  attribute string ior;
};

interface SequenceTest {

  exception failure {
    short index;
  };

  // UNBOUNDED SEQUENCES

  typedef sequence<short> shortSeq;
  attribute shortSeq attribute_short_seq;
  void check_attribute_short_seq () raises (failure);
  void in_parameter_short_seq (in shortSeq seq) raises (failure);
  void inout_parameter_short_seq (inout shortSeq seq) raises (failure);
  void out_parameter_short_seq (out shortSeq seq);
  shortSeq result_short_seq ();

  typedef sequence<Structure> structureSeq;
  attribute structureSeq attribute_struct_seq;
  void check_attribute_struct_seq () raises (failure);
  void in_parameter_struct_seq (in structureSeq seq) raises (failure);
  void inout_parameter_struct_seq (inout structureSeq seq) raises (failure);
  void out_parameter_struct_seq (out structureSeq seq);
  structureSeq result_struct_seq ();

  TestObject TestObject_factory (in long id);
  typedef sequence<TestObject> testObjectSeq;
  attribute testObjectSeq attribute_object_seq;
  void check_attribute_object_seq () raises (failure);
  void in_parameter_object_seq (in testObjectSeq seq) raises (failure);
  void inout_parameter_object_seq (inout testObjectSeq seq) raises (failure);
  void out_parameter_object_seq (out testObjectSeq seq);
  testObjectSeq result_object_seq ();


  // BOUNDED SEQUENCES
  typedef sequence<char,20> BoundedString;
  void set_short_name(in BoundedString name) raises(failure);  
  void set_long_name(in BoundedString name);
  BoundedString get_short_name ();
  BoundedString get_long_name ();
  short get_name (out BoundedString name);
  void reverse_name (inout BoundedString name);
};
