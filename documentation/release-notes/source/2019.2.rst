*****************
Open Dylan 2019.2
*****************

This document describes the 2019.2 release of Open Dylan, released DD
MMM, 2019.  This release contains many enhancements and bug fixes, highlights
of which are listed below.  For complete details see `the opendylan commit logs
<https://github.com/dylan-lang/opendylan/compare/v2019.1.0...v2019.2.0>`_. (Note
that some commit logs, for example for testworks and other libraries that are
included in Open Dylan as git submodules, may be in other repositories.)

* Download the release: http://opendylan.org/download
* Read documentation: http://opendylan.org/documentation
* Report problems: https://github.com/dylan-lang/opendylan/issues


Compiler
========

* The default compiler-back-end is now selected by querying the
  ``SUPPORTED_COMPILER_BACK_ENDS`` build system variable, normally set
  at configuration time within the ``config.jam`` build script:

  .. code-block:: jam

      SUPPORTED_COMPILER_BACK_ENDS ?= llvm c ;

  At build time, if the selected back-end is not supported by the
  build-system configuration, a warning will be issued.

  The default back-end, when it is available, is now LLVM.

* In the LLVM back-end, improved alignment information is supplied to
  the ``llvm.memcpy`` intrinsic.

* A new ``primitive-the`` primitive function is supported as an
  annotation that allows the compiler to assume that a value has the
  given type. These annotations were also added to the ``dylan``
  library at various frequently-executed expressions where the
  compiler is otherwise unable to infer the type, reducing the number
  of run-time type checks when using the LLVM back-end.

* Optimization for cases where the ``instance?`` function is used in
  an ``if`` or ``case`` condition has been improved.

* A bug in the LLVM back-end that could cause stack overflows in
  long-running functions has been fixed.

* The C back-end now uses C99 hexadecimal floating-point constants in
  its output to prevent loss of precision due to decimal conversion.

* A `longstanding bug
  <https://github.com/dylan-lang/opendylan/issues/1068>`_ in an
  attempted optimization that caused spurious serious warnings when
  compiling the Dylan library has been fixed.

* A `failure <https://github.com/dylan-lang/opendylan/issues/1239>`_ of
  code generated by the LLVM back-end to detect integer overflows
  resulting from arithmetic shifts has been fixed.

Run-time
========

* An error in the LLVM run-time which prevented call-site method
  dispatch caches from being used has been fixed. This change
  significanly improves the performance of code using the LLVM
  back-end.

* Support for ``apply-mep`` method entry (which is used for calling a
  known method using ``apply()`` when next-methods are known) was
  added to the LLVM run-time.

* The interpretation of ``decode-double-float`` and
  ``encode-double-float`` on 64-bit platforms has changed, so that 32
  bits of the ``<double-float>`` value are found in each of the two
  ``<machine-word>`` values. Previously (on 64-bit platforms) the entire
  64 bits were placed in one ``<machine-word>`` and the other contained
  zeroes. This change fixes `bug 1254
  <https://github.com/dylan-lang/opendylan/issues/1254>`_.

CORBA
=====


Debugging
=========


Documentation
=============

* Dylan Reference Manual links were added to `An Introduction to Dylan
  <https://opendylan.org/documentation/intro-dylan/index.html>`_

* Index sections were added to `Getting Started with the Open Dylan
  IDE
  <https://opendylan.org/documentation/getting-started-ide/index.html>`_,
  `Building Applications With DUIM
  <https://opendylan.org/documentation/building-with-duim/index.html>`_.

Build System
============

* The build system now reliably detects when changes have been made to
  Jamfile sources while the environment is running.

* The ``fdmake.pl`` build tool used during bootstrapping was improved
  so that it can build multiple libraries for each invocation of
  ``dylan-compiler``, significantly reducing time required to do
  bootstrap builds.

Library Changes
===============

dylan Library
-------------


common-dylan Library
--------------------

* The simple-io module has been removed.  This module was deprecated in Open
  Dylan 2014.1 and is replaced by the simple-format module.

* The performance of the ``join`` method was improved.

* The ``split`` function now signals an error when called with an empty
  separator (e.g., the empty string) or with a separator function that
  returns start/end indices that are equal.


io Library
----------


system Library
--------------

* Library initialization under the LLVM back-end has been changed to
  enable using the ``load-library`` function on all supported
  platforms.

* A `bug in delete-directory:file-system:system
  <https://github.com/dylan-lang/opendylan/issues/1227>`_ was fixed.

c-ffi Library
-------------


testworks Library
-----------------

* A new executable library, testworks-run, can be used to run any test library
  compiled as a shared library. On Linux, ``testworks-run --load
  libmy-test-library.so``.

* The testworks-specs library has been folded into testworks and has been
  greatly simplified. See `Interface Specification Suites
  <https://opendylan.org/documentation/testworks/usage.html#interface-specification-suites>`_. Note
  that the new specification suites no longer expect you to define one test per
  exported name in your interface module. Instead you can write tests in
  whatever way best suits your needs and the interface specification suite only
  verifies that the specification matches the implementation.

* A new function to has been added to retrieve a unique directory for the current test: 
  `test-temp-directory
  <https://opendylan.org/documentation/testworks/reference.html#testworks:testworks:test-temp-directory>`_

* The `--report` command line option now accepts "full" as a value, meaning to
  display individual assertion results in addition to the normal output.

* The output for several assertions has been made less verbose.

* Use ``--report json`` to generate reports in JSON format. These are much like
  the XML reports but less verbose.

* ``--report log`` has been removed. Use ``--report json`` or ``--report xml``
  instead.

* The `testworks-report` library has received some love and is now able to parse
  json and xml reports.

* An error is signalled if two tests are defined with the same name. (Note that
  when using combined test suites, or using the ``--load`` testworks-run option
  multiple times the names of **all** loaded tests and suites must be unique.)

* When a test has no assertions it receives a "not implemented" result. This is
  now considered to be a passing result rather than failing. The reasoning is
  that "not implemented" should be a reminder to implement the test (so it is
  still displayed prominently in the test output) but it should not obscure
  real test failures in the results. Tests that fail constantly because they're
  unimplemented are not very useful.

collections Library
-------------------

Contributors
============

We'd like to thank all the people that made contributions to this release and
to surrounding libraries in the Dylan ecosystem. This list is probably
incomplete...

