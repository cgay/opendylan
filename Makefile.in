### @configure_input@
.POSIX:

# TODO:
# * Windows
# * If OPEN_DYLAN_TARGET_PLATFORM isn't the local platform (which I assume is
#   possible during cross compilation) then the workspace tool needs to be told
#   to generate registries for that platform instead.
# * Make sure it's still possible to build when off-network, as long as deps
#   are already installed.

prefix          = @prefix@

srcdir          = @srcdir@
abs_srcdir      = @abs_srcdir@
abs_builddir    = @abs_builddir@

TARGET_PLATFORM = @OPEN_DYLAN_TARGET_PLATFORM@
RUNTIME_TARGET_PLATFORMS = $(TARGET_PLATFORM)

RUNTIME = sources/lib/run-time

BUILD_SUBDIRS   = bin build databases logs

DYLAN_JOBS	= 2

FDMAKE_OPTIONS  =
FDMAKE          = @PERL@ $(srcdir)/build/fdmake.pl $(FDMAKE_OPTIONS)

LLVM_RTGyes = llvm-runtime-generator
RTG = $(LLVM_RTG@SUPPORT_LLVM@)

BOOTSTRAP_1_COMPILER = @DYLANCOMPILER@

# These are "primitive" in the sense that most of them make use of the
# primitive-* functions.
BOOTSTRAP_1_PRIMITIVE_LIBS = \
	dylan common-dylan collections io system \
	generic-arithmetic big-integers

.PHONY: 3-stage-bootstrap \
	bootstrap-stage-1 bootstrap-stage-1-dirs bootstrap-stage-1-compiler \
        bootstrap-stage-1-runtime bootstrap-stage-1-jamfiles cli1 \
	bootstrap-stage-2 bootstrap-stage-2-dirs bootstrap-stage-2-compiler \
        bootstrap-stage-2-runtime bootstrap-stage-2-jamfiles cli2 \
	bootstrap-stage-3 bootstrap-stage-3-dirs bootstrap-stage-3-libraries \
        bootstrap-stage-3-runtime bootstrap-stage-3-jamfiles cli3 \
	all install install-stage dist clean check

all: @bootstrap_target@

###
# 3-stage bootstrap includes stages 1 and 2 and 3: it rebuilds the compiler
# and libraries, then rebuilds them again to take advantage of new
# optimizations. The 3-stage bootstrap is useful to build Open Dylan locally
# without installing it; if you want to install it, do a 3-stage bootstrap and
# run make install

3-stage-bootstrap: build-dylan-tool \
		   bootstrap-stage-1 \
                   bootstrap-stage-2 \
                   bootstrap-stage-3

###
# dylan-tool installs dependencies and creates the registry. It has its own
# registry and submodules. (In future we can use the dylan-tool bundled with
# the OD release instead of building it here.)

# TODO: use `$(DYLAN_TOOL) status --directory` instead, when that is fixed to
# output only the directory name.

WORKSPACE_DIR := $(shell dirname $(abs_srcdir))
DYLAN_TOOL_APP = $(WORKSPACE_DIR)/_build/bin/dylan-tool

build-dylan-tool:
	@echo Building dylan-tool...
	@OPEN_DYLAN_USER_ROOT=$(WORKSPACE_DIR)/_build \
	  $(MAKE) -C sources/app/dylan-tool build

# Add --verbose before "update" to debug.
update-workspace:
	$(DYLAN_TOOL_APP) update

########################################################################
# Stage 1 builds a compiler that can understand new primitives used in the
# BOOTSTRAP_1_PRIMITIVE_LIBS libraries. An existing compiler won't understand
# the new stuff, so until a new compiler is built, existing libs are used
# instead. Note that the stage 1 dylan-compiler loads a mix of existing and
# stage 1 libraries.

BOOTSTRAP_1_ROOT = $(abs_builddir)/Bootstrap.1

# This must be in the same directory as the main registry because files are
# copied from one to the other and the relative pathnames won't work otherwise.
BOOTSTRAP_1_REGISTRY = $(WORKSPACE_DIR)/bootstrap1-registry

BOOTSTRAP_1_ENV = \
        OPEN_DYLAN_TARGET_PLATFORM=$(TARGET_PLATFORM) \
        OPEN_DYLAN_USER_ROOT=$(BOOTSTRAP_1_ROOT) \
        OPEN_DYLAN_USER_REGISTRIES=$(BOOTSTRAP_1_REGISTRY)

bootstrap-stage-1: bootstrap-stage-1-dirs \
                   $(BOOTSTRAP_1_REGISTRY) \
                   bootstrap-stage-1-compiler \
                   bootstrap-stage-1-runtime \
                   bootstrap-stage-1-jamfiles

bootstrap-stage-1-dirs:
	@for d in $(BUILD_SUBDIRS); do mkdir -p Bootstrap.1/$$d; done

# BOOTSTRAP_1_PRIMITIVE_LIBS registry files are removed so those
# libraries are taken from the bootstrap compiler's system registries.
# The main point of stage 1 is to compile any changed compiler sources.
# Note that unlike with the manually maintained registry, dylan-tool
# doesn't use a "generic" registry, which is primarily to save humans
# from more maintenance. Everything is put in a platform-specific
# directory.
$(BOOTSTRAP_1_REGISTRY): update-workspace
	mkdir -p $(BOOTSTRAP_1_REGISTRY)
	cp -r $(WORKSPACE_DIR)/registry/$(TARGET_PLATFORM) $(BOOTSTRAP_1_REGISTRY)
	for lib in $(BOOTSTRAP_1_PRIMITIVE_LIBS); do \
	  rm -f $(BOOTSTRAP_1_REGISTRY)/*/$$lib; \
	done

bootstrap-stage-1-compiler:
	@echo Building Open Dylan bootstrap stage 1...
	@$(BOOTSTRAP_1_ENV) $(FDMAKE) --compiler "$(BOOTSTRAP_1_COMPILER)" \
	  dylan-compiler

BOOTSTRAP_1_LLVM_RTGVARSyes = \
        OPEN_DYLAN_LLVM_RUNTIME_GENERATOR=$(BOOTSTRAP_1_ROOT)/bin/$(RTG)
BOOTSTRAP_1_RTGVARS = $(BOOTSTRAP_1_LLVM_RTGVARS@SUPPORT_LLVM@)

bootstrap-stage-1-runtime:
	@$(BOOTSTRAP_1_ENV) $(FDMAKE) --compiler "$(BOOTSTRAP_1_COMPILER)" \
	  $(RTG)
	@for target_platform in $(RUNTIME_TARGET_PLATFORMS); do \
	  $(MAKE) -C $(RUNTIME) \
	    OPEN_DYLAN_USER_INSTALL=$(BOOTSTRAP_1_ROOT) \
	    OPEN_DYLAN_TARGET_PLATFORM=$$target_platform \
	    $(BOOTSTRAP_1_RTGVARS) \
	    install; \
	done

bootstrap-stage-1-jamfiles:
	@OPEN_DYLAN_USER_INSTALL=$(BOOTSTRAP_1_ROOT) \
	  $(MAKE) -C sources/jamfiles install

cli1:
	@$(BOOTSTRAP_1_ENV) $(BOOTSTRAP_1_COMPILER)

########################################################################
# Stage 2 bootstrap builds altered libraries and compiler and does not
# link to any existing or stage 1 libraries.

BOOTSTRAP_2_ROOT = $(abs_builddir)/Bootstrap.2

BOOTSTRAP_2_COMPILER = \
        $(BOOTSTRAP_1_ROOT)/bin/dylan-compiler \
          -build -verbose -jobs $(DYLAN_JOBS)

BOOTSTRAP_2_REGISTRY = $(WORKSPACE_DIR)/registry

BOOTSTRAP_2_ENV = \
        OPEN_DYLAN_TARGET_PLATFORM=$(TARGET_PLATFORM) \
        OPEN_DYLAN_USER_ROOT=$(BOOTSTRAP_2_ROOT) \
        OPEN_DYLAN_USER_REGISTRIES=$(BOOTSTRAP_2_REGISTRY)

bootstrap-stage-2: bootstrap-stage-2-dirs \
                   bootstrap-stage-2-compiler \
                   bootstrap-stage-2-runtime \
                   bootstrap-stage-2-jamfiles

bootstrap-stage-2-dirs:
	@for d in $(BUILD_SUBDIRS); do mkdir -p Bootstrap.2/$$d; done

bootstrap-stage-2-compiler:
	@echo Building Open Dylan bootstrap stage 2...
	@$(BOOTSTRAP_2_ENV) $(FDMAKE) --compiler "$(BOOTSTRAP_2_COMPILER)" \
	  dylan-compiler

BOOTSTRAP_2_LLVM_RTGVARSyes = \
        OPEN_DYLAN_LLVM_RUNTIME_GENERATOR=$(BOOTSTRAP_2_ROOT)/bin/$(RTG)
BOOTSTRAP_2_RTGVARS = $(BOOTSTRAP_2_LLVM_RTGVARS@SUPPORT_LLVM@)

bootstrap-stage-2-runtime:
	@$(BOOTSTRAP_2_ENV) $(FDMAKE) --compiler "$(BOOTSTRAP_2_COMPILER)" \
	  $(RTG)
	@for target_platform in $(RUNTIME_TARGET_PLATFORMS); do \
	  $(MAKE) -C $(RUNTIME) \
	    OPEN_DYLAN_USER_INSTALL=$(BOOTSTRAP_2_ROOT) \
	    OPEN_DYLAN_TARGET_PLATFORM=$$target_platform \
	    $(BOOTSTRAP_2_RTGVARS) \
	    install; \
	done

bootstrap-stage-2-jamfiles:
	@OPEN_DYLAN_USER_INSTALL=$(BOOTSTRAP_2_ROOT) \
	  $(MAKE) -C sources/jamfiles install

cli2:
	@$(BOOTSTRAP_2_ENV) $(BOOTSTRAP_2_COMPILER)

########################################################################
# Stage 3 builds libraries and compiler using stage 2 products, taking
# advantage of any new optimizations etc. in this release. It basically builds
# an installation without actually installing it.

BOOTSTRAP_3_ROOT = $(abs_builddir)/Bootstrap.3

BOOTSTRAP_3_LIBRARIES = \
	dylan-compiler dylan-environment parser-compiler dswank
BOOTSTRAP_3_STATICS = \
	dylan-tool-app

BOOTSTRAP_3_COMPILER = \
        $(BOOTSTRAP_2_ROOT)/bin/dylan-compiler \
          -build -verbose -jobs $(DYLAN_JOBS)

BOOTSTRAP_3_REGISTRY = $(WORKSPACE_DIR)/registry

BOOTSTRAP_3_ENV = \
        OPEN_DYLAN_TARGET_PLATFORM=$(TARGET_PLATFORM) \
        OPEN_DYLAN_USER_ROOT=$(BOOTSTRAP_3_ROOT) \
        OPEN_DYLAN_USER_REGISTRIES=$(BOOTSTRAP_3_REGISTRY)

bootstrap-stage-3: bootstrap-stage-3-dirs \
                   bootstrap-stage-3-libraries \
                   bootstrap-stage-3-statics \
                   bootstrap-stage-3-runtime \
                   bootstrap-stage-3-jamfiles

bootstrap-stage-3-dirs:
	@for d in $(BUILD_SUBDIRS); do mkdir -p Bootstrap.3/$$d; done

bootstrap-stage-3-libraries:
	@echo Building Open Dylan bootstrap stage 3...
	@$(BOOTSTRAP_3_ENV) $(FDMAKE) --compiler "$(BOOTSTRAP_3_COMPILER)" \
          $(BOOTSTRAP_3_LIBRARIES)

bootstrap-stage-3-statics:
	@echo Building Open Dylan unified executables...
	@$(BOOTSTRAP_3_ENV) $(FDMAKE) --compiler "$(BOOTSTRAP_3_COMPILER)" \
          --unify $(BOOTSTRAP_3_STATICS)

BOOTSTRAP_3_LLVM_RTGVARSyes = \
        OPEN_DYLAN_LLVM_RUNTIME_GENERATOR=$(BOOTSTRAP_3_ROOT)/bin/$(RTG)
BOOTSTRAP_3_RTGVARS = $(BOOTSTRAP_3_LLVM_RTGVARS@SUPPORT_LLVM@)

bootstrap-stage-3-runtime:
	@$(BOOTSTRAP_3_ENV) $(FDMAKE) --compiler "$(BOOTSTRAP_3_COMPILER)" \
	  $(RTG)
	@for target_platform in $(RUNTIME_TARGET_PLATFORMS); do \
	  $(MAKE) -C $(RUNTIME) \
	    OPEN_DYLAN_USER_INSTALL=$(BOOTSTRAP_3_ROOT) \
	    OPEN_DYLAN_TARGET_PLATFORM=$$target_platform \
	    $(BOOTSTRAP_3_RTGVARS) \
	    install; \
	done

bootstrap-stage-3-jamfiles:
	@OPEN_DYLAN_USER_INSTALL=$(BOOTSTRAP_3_ROOT) \
	  $(MAKE) -C sources/jamfiles install

cli3:
	@$(BOOTSTRAP_3_ENV) $(BOOTSTRAP_3_COMPILER)

########################################################################

###
# Install stage installs stage 3 into prefix
install-stage:
	@echo Preparing to install Open Dylan in $(DESTDIR)$(prefix)...
	@install -d $(DESTDIR)$(prefix)
	@echo Copying sources to $(DESTDIR)$(prefix)/sources...
	@rm -rf $(DESTDIR)$(prefix)/sources
	@cp -R $(srcdir)/sources $(DESTDIR)$(prefix)
	@find $(DESTDIR)$(prefix)/sources -depth -name '.*' -exec rm -rf {} \;
	@echo Installing Open Dylan in $(DESTDIR)$(prefix)
	@install -d $(prefix)/bin $(prefix)/databases $(prefix)/lib $(DESTDIR)$(prefix)/lib/runtime
	@install -d $(prefix)/share/opendylan $(DESTDIR)$(prefix)/include/opendylan
	@cp -R $(abs_builddir)/Bootstrap.3/bin $(DESTDIR)$(prefix)
	@cp -R $(abs_builddir)/Bootstrap.3/databases $(DESTDIR)$(prefix)
	@-cp -R $(abs_builddir)/Bootstrap.3/include/opendylan $(DESTDIR)$(prefix)/include
	@# We use force here because on macOS, the lib directory likely contains read-only
	@# static libraries for the Boehm GC.
	@cp -Rf $(abs_builddir)/Bootstrap.3/lib $(DESTDIR)$(prefix)
	@cp -Rf $(abs_builddir)/Bootstrap.3/share/opendylan $(DESTDIR)$(prefix)/share
	@cp -R $(srcdir)/tools/lldb $(DESTDIR)$(prefix)/share/opendylan
	@cp -R $(srcdir)/tools/bash_completion $(DESTDIR)$(prefix)/share/opendylan
	@cp $(srcdir)/tools/scripts/dylan-lldb $(DESTDIR)$(prefix)/bin
	@cp $(srcdir)/License.txt $(DESTDIR)$(prefix)
	@cp $(srcdir)/README.md $(DESTDIR)$(prefix)
	@cp $(srcdir)/BUILDING.rst $(DESTDIR)$(prefix)
	@echo Done!

install: 3-stage-bootstrap install-stage

#install-html:

#uninstall:

clean:
	-rm -rf $(abs_builddir)/Bootstrap.1
	-rm -rf $(abs_builddir)/Bootstrap.2
	-rm -rf $(abs_builddir)/Bootstrap.3
	-rm -rf $(abs_builddir)/release
	-rm -rf $(abs_builddir)/opendylan-*.tar.bz2
	-rm -rf $(BOOTSTRAP_1_REGISTRY)
	-rm -rf $(WORKSPACE_DIR)/registry
	-rm -rf $(WORKSPACE_DIR)/_build
	@for target_platform in $(RUNTIME_TARGET_PLATFORMS); do \
	  $(MAKE) -C $(RUNTIME) \
	    OPEN_DYLAN_TARGET_PLATFORM=$$target_platform \
	    clean; \
	done
	rm -f $(srcdir)/sources/app/llvm-tablegen/tablegen-parser.dylan
	rm -f $(srcdir)/sources/lib/llvm/llvm-asm-parser.dylan
	rm -f $(srcdir)/sources/corba/scepter/front-end/file/parser.dylan
	rm -rf $(srcdir)/sources/corba/orb/iop-protocol
	rm -rf $(srcdir)/sources/corba/orb/ir-protocol
	rm -rf $(srcdir)/sources/corba/orb/ir-stubs
	rm -rf $(srcdir)/sources/corba/services/naming/naming-protocol
	rm -rf $(srcdir)/sources/corba/services/naming/naming-skeletons
	rm -rf $(srcdir)/sources/corba/services/naming/naming-stubs
	rm -rf $(srcdir)/sources/corba/demos/pente/protocol/
	rm -rf $(srcdir)/sources/corba/demos/pente/skeletons/
	rm -rf $(srcdir)/sources/corba/demos/pente/stubs/
	rm -rf $(srcdir)/sources/corba/tests/idl/protocol/
	rm -rf $(srcdir)/sources/corba/tests/idl/skeletons/
	rm -rf $(srcdir)/sources/corba/tests/idl/stubs/
	rm -rf $(srcdir)/sources/runtime-manager/debugger-nub/protocol
	rm -rf $(srcdir)/sources/runtime-manager/debugger-nub/skeletons
	rm -rf $(srcdir)/sources/runtime-manager/debugger-nub/stubs

distclean: clean
	-rm -f aclocal.m4
	-rm -f configure
	-rm -f config.log
	-rm -f config.status
	-rm -f config.status.lineno
	-rm -f Makefile
	-rm -f sources/lib/run-time/Makefile
	-rm -f sources/jamfiles/Makefile sources/jamfiles/config.jam
	-rm -rf build-aux
	-rm -rf autom4te.cache

mostlyclean:

maintainer-clean:

TAGS:

html:

version = @VERSION@

dist: 3-stage-bootstrap
	mkdir -p release/opendylan-$(version)/bin
	mkdir -p release/opendylan-$(version)/databases
	mkdir -p release/opendylan-$(version)/include/opendylan
	mkdir -p release/opendylan-$(version)/lib
	mkdir -p release/opendylan-$(version)/sources
	mkdir -p release/opendylan-$(version)/share/opendylan
	@echo Copying sources...
	cp -R $(srcdir)/sources release/opendylan-$(version)/
	@echo Removing unnecessary directories...
	find release/opendylan-$(version)/sources -depth -name '.*' -exec rm -rf {} \;
	cp -R Bootstrap.3/bin release/opendylan-$(version)/
	cp -R Bootstrap.3/sbin/* release/opendylan-$(version)/bin
	ln -s dylan-tool-app release/opendylan-$(version)/bin/dylan
	cp -R Bootstrap.3/databases release/opendylan-$(version)/
	-cp -R Bootstrap.3/include/opendylan release/opendylan-$(version)/include
	cp -R Bootstrap.3/lib release/opendylan-$(version)/
	cp -R Bootstrap.3/share/opendylan release/opendylan-$(version)/share
	cp -R $(srcdir)/tools/lldb release/opendylan-$(version)/share/opendylan
	cp -R $(srcdir)/tools/bash_completion release/opendylan-$(version)/share/opendylan
	cp $(srcdir)/License.txt release/opendylan-$(version)/
	cp $(srcdir)/README.md release/opendylan-$(version)/
	cp $(srcdir)/BUILDING.rst release/opendylan-$(version)/
	cd release \
	  && tar cjf opendylan-$(version)-$(TARGET_PLATFORM).tar.bz2 opendylan-$(version) \
	  && ln -s opendylan-$(version)-$(TARGET_PLATFORM).tar.bz2 opendylan.tar.bz2


TEST_LIBS = \
	libraries-test-suite \
	dfmc-reader-test-suite \
	strings-test-suite \
	duim-test-suite \
	deuce-test-suite \
	jam-test-suite \
	channels-test-suite \
	variable-search-tests \
	command-line-parser-test-suite \
	logging-test-suite \
	regular-expressions-test-suite \
	hash-algorithms-test

TEST_LOADS = $(shell for lib in $(TEST_LIBS); do echo "--load lib$${lib}.@shrext@ "; done)

check: bootstrap-stage-3
	@$(BOOTSTRAP_3_ENV) $(FDMAKE) --compiler "$(BOOTSTRAP_3_COMPILER)" \
	  testworks-run $(TEST_LIBS)
	$(BOOTSTRAP_3_ROOT)/bin/testworks-run $(TEST_LOADS)

check-environment: bootstrap-stage-3
	@$(BOOTSTRAP_3_ENV) $(FDMAKE) --compiler "$(BOOTSTRAP_3_COMPILER)" \
	  dfmc-environment-test-suite-app
	@OPEN_DYLAN_USER_REGISTRIES=$(BOOTSTRAP_3_REGISTRY) \
         OPEN_DYLAN_USER_SOURCES=$(srcdir)/sources \
         OPEN_DYLAN_USER_ROOT=$(abs_builddir)/_testbuild \
	  $(BOOTSTRAP_3_ROOT)/bin/dfmc-environment-test-suite-app

installcheck:

installdirs:

Makefile:  $(srcdir)/Makefile.in config.status
	CONFIG_HEADERS= CONFIG_LINKS= \
	  CONFIG_FILES=./$@ $(SHELL) ./config.status
